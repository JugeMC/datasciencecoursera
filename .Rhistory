x!==y
rollsinarow<-function(roll){
count = 1
while (count>0){
roll1 <- sample(1:6,2,replace=TRUE)
roll2 <- sample(1:6,2,replace=TRUE)
com <- roll1==roll2
if (com==2){
print(count)
break
}
count<-count+1
}
}
rollsinarow(2)
clear
x<-list(a=1:5,b=rnorm(10))
x
lapply(x,mean)
y<-c(1:15)
lapply(y,mean)
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
apply(x,1,mean)
apply(x,3,mean)
apply(x,0,mean)
lapply(x,mean)
ls90
ls()
x
apply(x,1,quantile,probs=c(.25,.75))
apply(x,1,quantile)
apply(x,1,quantile, probs=.5)
apply(x,1,quantile, probs=c(.5,.75)
)
a<-array(rnorm(2*2*10),c(2,2,10))
a
head(a)
rowMeans(a,dims=2)
apply(a,c(1,2),mean)
apply(a,c(,2,3),mean)
x<-matrix(rnorm(200),20,10)
x
ls()
list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
mapply(rep,1:4,4:1)
mapply(rep,1:4,3:1)
mapply(rep,1:4,3:0)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <-c(1,2,3,4,5,6,7,8,9,10)
makeVector(x)
cachemean(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(x)
cachemean(makeVector(x))
mean(x)
x<-rnorm(200)
x
cachemean(makeVector(x))
mean(x_)
mean(x)
x<-matrix(1:9,3,3)
x
solve(x)
?solve
x<-matrix(1:9,3,4)
x<-matrix(1:12,3,4)
x
solve(x)
x<-matrix(3:12,3,3)
x<-matrix(4:12,3,3)
x
solve(x)
solve.default(x)
y<-matrix(1:9,3,3)
x
y
solve(x,y)
tapply(c(0,1,2,3),1:2,mean)
tapply(c(0,1,2,3),c(1,1,2,2),mean)
tapply(c(0,1,2,3),c(1,1,1,2),mean)
tapply(c(0,1,2,3),c(1,1,15,2),mean)
tapply(c(0,1,2,3),c(1,1,15,2),range)
tapply(c(0,1,2,3),c(1,1,15,2),sum)
tapply(c(0,1,2,3),c(1,1,"hi",2),sum)
sample(1:6,2,replace=TRUE)
sample(1:6,2,replace=TRUE)
doubles <- function(max){
count=1
for count>0{
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
"It took" print(count) "tries to roll doubles"
break
else
count <- count+1
}
if (count==max){
"You reached the maximum number of tries!"
break
}
}
}
doubles <- function(max){
count<-1
for count>0{
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
"It took" print(count) "tries to roll doubles"
break
else
count <- count+1
}
if (count==max){
"You reached the maximum number of tries!"
break
}
}
}
doubles <- function(max){
count<-1
for count>0{
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
else
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles <- function(max){
count<-1
for count>0{
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
else
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles <- function(max){
count<-1
for (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
else
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles <- function(max){
count<-1
for (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
else
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
else
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
count <- count+1
}
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(100)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(10)
doubles(10)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took tries to roll doubles")
print(count)
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(10)
doubles(10)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took" & count & "tries to roll doubles")
print(count)
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(10)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took" && count && "tries to roll doubles")
print(count)
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(10)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took") print(count) print("tries to roll doubles")
print(count)
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took")
print(count)
print("tries to roll doubles")
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
}
}
}
doubles(10)
doubles(3)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
if (roll[1]==roll[2]){
print("It took")
print(count)
print("tries to roll doubles")
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles(3)
doubles(3)
doubles(3)
doubles(3)
doubles(3)
doubles(10)
doubles(10)
doubles <- function(max){
count<-1
while (count>0){
roll<-sample(1:6,2,replace=TRUE)
print(roll)
if (roll[1]==roll[2]){
print("It took")
print(count)
print("tries to roll doubles")
break
}
count <- count+1
if (count==max){
print("You reached the maximum number of tries!")
break
}
}
}
doubles(10)
doubles(10)
doubles(10)
doubles(10)
doubles(10)
doubles(10)
doubles(10)
doubles(1)
doubles(1)
doubles(2)
doubles(2)
doubles(2)
library(datasets)
data("iris")
data(iris)
?iris
head(iris)
lapply(iris,species)
?lapply
lapply(iris,mean)
dim(iris)
class(iris)
un.class(iris)
unclass(iris)
iris
lapply(iris[1,],mean, iris$Sepal.Length=="virginica")
lapply(iris[1,],mean, iris$Sepal.Length)
swift()
data(swirl)
load(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
exit
swirl()
ls
ls()
head(iris)
head(iris)
dim(iris)
class(iris)
iris_virg <- iris["virginica",]
iris_virg
iris_virg <- iris[,"virginica"]
iris_virg <- iris[virginica,]
as.list(iris)
class(iris)
lapply(iris,mean)
swirl()
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
swirl()
?apply
swirl()
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,unique,character(1))
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass,mean)
swirl()
?tapply
tapply(iris$Sepal.Length,iris$Species,mean)
iris[100,]
iris[101,]
iris[150,]
virg<-iris[101:150,]
colMeans(virg)
lapply(virg,mean)
?apply
q2 <- apply(iris[,1:4],2,mean)
q2
class(q2)
q22 <- apply(iris,2,mean)
q22 <- apply(iris,1,mean)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars,mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars,2,mean)
q4<-tapply(mtcars$mpg,mtcars$cyl,mean)
q4[1]
q4<-tapply(mtcars$hp,mtcars$cyl,mean)
q4
q4[3]-q4[1]
debug(ls)
debug
debug(ls)
ls()
ls()
debug(ls)
ls()
ls()
